Coding Exercise:
1.	1.	Use the print function to output the text "I am a developer!".
		Remember -- case sensitivity matters in Python. 
		All characters and casings must match the the ones in the string above.
	2.	Use the print function to output the string "a ** b ** c". 
		Make sure to use the proper keyword argument to separate the values. 
		Don't cheat by manually copying and pasting the string.
	3.	Help me out! When I print the two lines below, they are separated by a line break. 
		What's peanut butter without jelly? NOTHING! 
		Fix the code to ensure the second line picks up where the first line concludes. 
		Your solution should have 2 print function calls.
		EXAMPLES
		--------
		print("Peanut butter and ")
		print("jelly")
2.	a.	Declare a season variable and assign it a string of your favorite season (Summer, Fall, Spring, or Winter). 
		Make sure the first letter is capitalized.
	b.	Declare a lucky_number variable and assign it your favorite number.
	c.	Declare a hard_math variable and assign it the sum of 3, 4 and 5.
	d.	Declare a my_str​ variable set to a string of “3”.
	e.	Declare a ​my_num​ variable which converts ​my_str​ to an integer.
	f.	Declare a ​fancy_name​ variable and assign it a string with your name. 
		Then, invoke the ​print​ function and pass in ​fancy_name​ in between the parentheses. 
		I.e. ​print(fancy_name)​.
3.	a.	Define a easy_money function that accepts no parameters and always returns the value 100.
	b.	Define a best_food_ever function that accepts no parameters and always returns the string “Sushi”.
	c.	Define a convert_to_currency function that accepts a single parameter (an integer). 
		The function should convert the argument to a string, prefix it with a dollar sign, and return the result.
		EXAMPLES
		--------
		convert_to_currency(15)    => "$15"
		convert_to_currency(8)     => "$8"
4.	1.	Define a string_adder function that accepts two strings (a and b) as arguments. 
		It should return a concatenated version of the arguments with a space in between.
		If the user does not pass in arguments, both arguments should default to an empty string.
		EXAMPLES
		--------
		string_adder("Hello", "World")      => "Hello World"
		string_adder("Emilio", "Estevez")   => "Emilio Estevez"
		string_adder()                      => " "
		string_adder("Tiger")               => "Tiger "
	2.	Define a multiplier function that accepts three integers as arguments.
		Return the product of the arguments. 
		The product is the total when values are multiplied together.
		If the user does not provide any arguments, all three parameters should have default arguments of 1.
		EXAMPLES
		--------
		multiplier(2, 2, 2)    => 8
		multiplier()           => 1
		multiplier(3)          => 3
		multiplier(2, 5)       => 10
5.	1.	Define a long_word function that accepts a string. 
		The function should return a Boolean that reflects whether the string has more than 7 characters.
		EXAMPLES
		--------
		long_word("Python")         => False
		long_word("magnificent")    => True
	2.	Define a first_longer_than_second function that accepts two string arguments. 
		The function should return a True if the first string is longer than the second and False otherwise (including if they are equal in length).
		EXAMPLES
		--------
		first_longer_than_second("Python", "Ruby")     => True
		first_longer_than_second("cat", "mouse")       => False
		first_longer_than_second("Steven", "Seagal")   => False
6.	1.	Define a same_first_and_last_letter function that accepts a string as an argument. 
		The function should return a True if the first and last character are equal, and False otherwise.
		Assume the string will always have 1 or more characters.
		EXAMPLES
		--------
		same_first_and_last_letter("runner")   => True
		same_first_and_last_letter("Runner")   => False
		same_first_and_last_letter("clock")    => False
		same_first_and_last_letter("q")        => True
	2.	Define a three_number_sum function that accepts a 3-character string as an argument. 
		The function should add up the sum of the digits of the string. 
		HINT: You’ll have to figure out a way to convert the string-ified numbers to integers.
		EXAMPLES
		--------
		three_number_sum("123")   => 6
		three_number_sum("567")   => 18
		three_number_sum("444")   => 12
		three_number_sum("000")   => 0
7.	1.	Define a first_three_characters function that accepts a string argument.
		The function should return the first 3 characters of the string.
		EXAMPLES
		--------
		first_three_characters("dynasty")   => "dyn"
		first_three_characters("empire")    => "emp"
	2.	Define a last_five_characters function that accepts a string argument. 
		The function should return the last 5 characters of the string.
		EXAMPLES
		--------
		last_five_characters("dynasty")   => "nasty"
		last_five_characters("empire")    => "mpire"
	3.	Define a is_palindrome function that accepts a string argument. 
		The function should return True if the string is spelled the same backwards as it is forwards. 
		Return False otherwise.
		EXAMPLES
		--------
		is_palindrome("racecar")   => True
		is_palindrome("yummy")     => False
8.	1.	Define a vowel_count function that accepts a string argument.
		The function should return the count of vowels in the string.
		The 5 vowels are "a", "e", "i", "o", and "u".
		You can assume the string will be in all lowercase.
		EXAMPLES
		--------
		vowel_count("estate")        => 3
		vowel_count("helicopter")    => 4
		vowel_count("ssh")           => 0
	2.	Define a find_my_letter function that accepts two arguments: a string and a character.
		The function should return the first index position of the character in the string.
		The function should return a -1 if the character does not exist in the string.
		EXAMPLES
		--------
		find_my_letter("dangerous", "a")    => 1
		find_my_letter("bazooka", "z")      => 2
		find_my_letter("lollipop", "z")     => -1
9.	Define a fancy_cleanup function that accepts a single string argument.
	The function should clean up the whitespace on both sides of the argument. 
    It should also replace every occurrence of the letter "g" with the letter "z" and every occurence of a space with an exclamation point (!).
	EXAMPLES
	--------
	fancy_cleanup("       geronimo crikey  ")   => "zeronimo!crikey"
	fancy_cleanup("       nonsense  ")          => "nonsense"
	fancy_cleanup("grade")                      => "zrade"
10.	1.	Define a even_or_odd function that accepts a single integer.
		If the integer is even, the function should return the string “even”.
		If the integer is odd, the function should return the string “odd”.
		EXAMPLES
		--------
		even_or_odd(2)    => "even"
		even_or_odd(0)    => "even"
		even_or_odd(13)   => "odd"
		even_or_odd(9)    => "odd"
	2.	Define a truthy_or_falsy function that accepts a single argument.
		The function should return a string that reads "The value _____ is ______". 
		where the first space is the argument and the second space is either 'truthy' or 'falsy'. 
		See the sample invocations below.
		EXAMPLES
		--------
		truthy_or_falsy(0)        => "The value 0 is falsy"
		truthy_or_falsy(5)        => "The value 5 is truthy"
		truthy_or_falsy("Hello")  => "The value Hello is truthy"
		truthy_or_falsy("")       => "The value  is falsy"
11.	Declare a negative_energy function that accepts a numeric argument and returns its absolute value.
	The absolute value is the number's distance from zero.
	EXAMPLES
	--------
	negative_energy(5)    => 5
	negative_energy(10)   => 10
	negative_energy(-5)   => 5
	negative_energy(-8)   => 8
	negative_energy(0)    => 0
12.	1.	Define a divisible_by_three_and_four function that accepts a number as its argument. 
		It should return True if the number is evenly divisible by both 3 and 4 . 
		It should return False otherwise.
		EXAMPLES
		--------
		divisible_by_three_and_four(3)   => False
		divisible_by_three_and_four(4)   => False
		divisible_by_three_and_four(12)  => True
		divisible_by_three_and_four(18)  => False
		divisible_by_three_and_four(24)  => True
	2.	Declare a string_theory function that accepts a string as an argument.
		It should return True if the string has more than 3 characters and starts with a capital “S”. 
		It should return False otherwise.
		EXAMPLES
		--------
		string_theory("Sansa") => True
		string_theory("Story") => True
		string_theory("See") => False
		string_theory("Fable") => False
13.	Define a function called "factorial" that accepts a single number as input. 
	A factorial represents the product of all numbers up to, and including, that number. 
	For example, 5 factorial is 5 * 4 * 3 * 2 * 1 = 120. 
	Return the factorial calculation from your function. 
	You should NOT use any kind of loops. 
	Instead, utilize recursion. 
	Your function MUST call itself.
	EXAMPLES
	--------
	factorial(1) => 1
	factorial(2) => 2
	factorial(3) => 6
	factorial(4) => 24
	factorial(5) => 120
14.	a.	Create an empty list and assign it to the variable "empty".
	b.	Create a list with a single Boolean — True — and assign it to the variable "active".
	c.	Create a list with 5 integers of your choice and assign it to the variable "favorite_numbers".
	d.	Create a list with 3 strings  — "red", "green", "blue" — and assign it to the variable "colors".
	e.	Declare an is_long function that accepts a single list as an argument.
		It should return True if the list has more than 5 elements, and False otherwise
15.	1.	Define a first_and_last function that accepts a list of strings. 
		The function should return a concatenation of the first element and the last element. 
		Assume the list will always have 1 or more elements.
		EXAMPLES
		--------
		first_and_last(["a", "b", "c"])        => "ac"
		first_and_last(["bob", "tom", "rob"])  => "bobrob"
		first_and_last(["a"])                  => "aa"
	2.	Define a product_of_even_indices function that accepts a list of numbers. 
		The list will always have 6 total elements. 
		The function should return the product (multiplied total) of all numbers at an even index (0, 2, 4).
		EXAMPLES
		--------
		product_of_even_indices([1, 2, 3, 4, 5, 6])    =>  15
		product_of_even_indices([3, 4, 3, 5, 3, 6])    =>  27
	3.	Define a first_letter_of_last_string function that accepts a list of strings. 
		It should return one character — the first letter of the last string in the list. 
		Assume the list will always have at least one string.
		EXAMPLES
		--------
		first_letter_of_last_string(["cat", "dog", "zebra"]) => "z"
		first_letter_of_last_string(["nonsense"]) => "n"
16.	Define a split_in_two function that accepts a list and a number.
	If the number is even, return the list elements from the third element to the end of the list.
	If the number is odd, return the list elements from index 0 (inclusive) to 2 (exclusive).
	EXAMPLES
	--------
	values = ["a", "b", "c", "d", "e", "f"]
	split_in_two(values, 3)     => ["a", "b"]
	split_in_two(values, 4)     => ["c", "d", "e", "f"]
	split_in_two(values, 1)     => ["a", "b"]
	split_in_two(values, 10)    => ["c", "d", "e", "f"]
17.	1.	Declare a nested_extraction function that accepts a list of lists and an index position.
		The function should use the index as the basis of finding both the nested list and the element from that list with the given index position.
		You can assume the number of lists will always be equal to the number of elements within each of them.
		EXAMPLES
		--------
		nl = [[3, 4, 5], [7, 8, 9], [10, 11, 12]]
		nested_extraction(nl, 0)  => 3
		nested_extraction(nl, 1)  => 8
		nested_extraction(nl, 2)  => 12
	2.	Declare a beginning_and_end function that accepts a list of elements.
		It should return True if the first and last elements in the list are equal and False if they are unequal.
		Assume the list will always have at least 1 element.
		EXAMPLES
		--------
		beginning_and_end([1, 2, 3, 1])     => True
		beginning_and_end([1, 2, 3, 4, 5])  => False
		beginning_and_end(["a", "b", "a"])  => True
		beginning_and_end([15])             => True
	3.	Declare a long_word_in_collection function that accepts a list and a string. 
		The function should return True if 
		- the string exists in the list AND
		- the string has more than 4 characters.
		EXAMPLES
		--------
		words = ["cat", "dog", "rhino"]
		long_word_in_collection(words, "rhino")  => True
		long_word_in_collection(words, "cat")    => False
		long_word_in_collection(words, "monkey") => False
18.	1.	Define a sum_of_lengths function that accepts a list of strings.
		The function should return the sum of the string lengths.
		EXAMPLES
		--------
		sum_of_lengths(["Hello", "Bob"])                  => 8
		sum_of_lengths(["Nonsense"])                      => 8
		sum_of_lengths(["Nonsense", "or", "confidence"])  => 20
	2.	Define a product function that accepts a list of numbers.
		The function should return the product of the numbers.
		The list will always have at least one value.
		EXAMPLES
		--------
		product([1, 2, 3])     => 6
		product([4, 5, 6, 7])  => 840
		product([10])          => 10
19.	1.	Define a smallest_number function  that accepts a list of numbers.
		It should return the smallest value in the list.
		EXAMPLES
		--------
		smallest_number([1, 2, 3])     => 1
		smallest_number([3, 2, 1])     => 1
		smallest_number([4, 5, 4])     => 4
		smallest_number([-3, -2, -1])  => -3
	2.	Define a concatenate function that accepts a list of strings. 
		The function should return a concatenated string which consists of all list elements whose length is greater than 2 characters.
		EXAMPLES
		--------
		concatenate(["abc", "def", "ghi"])      => "abcdefghi"
		concatenate(["abc", "de", "fgh", "ic"]) => "abcfgh"
		concatenate(["ab", "cd", "ef", "gh"])   => ""
	3.	Define a super_sum function that accepts a list of strings.
		The function should sum the index positions of the first occurence of the letter “s” in each word. 
		Not every word is guaranteed to have an “s”.
		Don’t use "sum" as a variable name as it’s a built-in keyword.
		EXAMPLES
		--------
		super_sum([])                                 => 0
		super_sum(["mustache"])                       => 2
		super_sum(["mustache", "greatest"])           => 8
		super_sum(["mustache", "pessimist"])          => 4
		super_sum(["mustache", "greatest", "almost"]) => 12
20.	1.	Define an in_list function that accepts a list of strings and a separate string.
		Return the index where the string exists in the list.
		If the string does not exist, return -1.
		Do NOT use the find or index methods.
		EXAMPLES
		--------
		strings = ["enchanted", "sparks fly", "long live"]
		in_list(strings, "enchanted")  ==> 0
		in_list(strings, "sparks fly") ==> 1
		in_list(strings, "fifteen")    ==> -1
		in_list(strings, "love story") ==> -1
	2.	Define a sum_of_values_and_indices function that accepts a list of numbers. 
		It should return the sum of all of the elements along with their index values.
		EXAMPLES
		--------
		sum_of_values_and_indices([1, 2, 3])    => (1 + 0) + (2 + 1) + (3 + 2) => 9
		sum_of_values_and_indices([0, 0, 0, 0]) => 6
		sum_of_values_and_indices([])           => 0
21.	a.	Given the great_directors list below, overwrite the “Steven Spielberg” string with a string of “Michael Bay”.
		--------
		great_directors = ["Martin Scorsese", "Steven Spielberg", "Francis Ford Coppola"]
	b.	Given the transformers list below, overwrite “Bumblebee” with “Grimlock”.
		--------
		transformers = ["Optimus Prime", "Megatron", "Bumblebee", "Starscream"]
	c.	Given the camping_trip_supplies list below, overwrite "Socks" with "Food".
		--------
		camping_trip_supplies = ["Socks", "Flashlight", "Tent", "Blanket"]
	d.	Given the tech_companies list below, overwrite the Microsoft, Blueberry, and IBM strings with the strings “Facebook” and “Apple”. 
		Use list slicing syntax.
		--------
		tech_companies = ["Google", "Microsoft", "Blackberry", "IBM", "Yahoo"]
22.	1.	Declare a length_match function that accepts a list of strings and an integer.
		It should return a count of the number of strings whose length is equal to the number.
		EXAMPLES
		--------
		length_match(["cat", "dog", "kangaroo", "mouse"], 3))  => 2
		length_match(["cat", "dog", "kangaroo", "mouse"], 5))  => 1
		length_match(["cat", "dog", "kangaroo", "mouse"], 4))  => 0
		length_match([], 5))                                   => 0
	2.	Declare a sum_from function that accepts two numbers as arguments.
		The second number will always be greater than the first number.
		The function should return the sum of all numbers from the first number to the second number (inclusive).
		EXAMPLES
		--------
		sum_from(1, 2)   # 1 + 2                  => 3
		sum_from(1, 5)   # 1 + 2 + 3 + 4 + 5      => 15
		sum_from(3, 8)   # 3 + 4 + 5 + 6 + 7 + 8  => 33
		sum_from(9, 12)  # 9 + 10 + 11 + 12       => 42
	3.	Declare a same_index_values function that accepts two lists.
		The function should return a list of the index positions in which the two lists have equal elements.
		EXAMPLES
		--------
		same_index_values([1, 2, 3], [3, 2, 1])                         => [1]
		same_index_values(["a", "b", "c", "d"], ["c", "b", "a", "d"])   => [1, 3]
23.	1.	Define an only_evens function that accepts a list of numbers. 
		It should return a new list consisting of only the even numbers from the original list.
		EXAMPLES
		--------
		only_evens([4, 8, 15, 16, 23, 42]) => [4, 8, 16, 42]
		only_evens([1, 3, 5])              => []
		only_evens([])                     => []
	2.	Define a long_strings function that accepts a list of strings. 
		It should return a new list consisting of only the strings that have 5 characters or more.
		EXAMPLES
		--------
		long_strings(["Hello", "Goodbye", "Sam"])  => ["Hello", "Goodbye"]
		long_strings(["Ace", "Cat", "Job"])        => []
		long_strings([])                           => []
24.	Write a factors function that accepts a positive whole number.
	It should return a list of all of the number's factors in ascending order.
	HINT: Could the range function be helpful here? Or maybe a while loop?
	EXAMPLES
	--------
	factors(1)  => [1]
	factors(2)  => [1, 2]
	factors(10) => [1, 2, 5, 10]
	factors(64) => [1, 2, 4, 8, 16, 32, 64]
25.	1.	Declare a delete_all function that accepts a list of strings and a target string.
		Remove all occurrences of the target string from the list and return it.
		EXAMPLES
		--------
		delete_all([1, 3, 5], 3)  => [1, 5]
		delete_all([5, 3, 5], 5)  => [3]
		delete_all([4, 4, 4], 4)  => []
		delete_all([4, 4, 4], 6)  => [4, 4, 4]
	2.	Declare a push_or_pop function that accepts a list of numbers.
		Build up and return a new list by iterating over the list of numbers.
		If a number is greater than 5, add it to the end of the new list.
		If a number is less than or equal to 5, remove the last element added to the new list.
		Assume the order of numbers in the argument will never require removing from an empty list.
		EXAMPLES
		--------
		push_or_pop([10])            => [10]
		push_or_pop([10, 4])         => []
		push_or_pop([10, 20, 30])    => [10, 20, 30]
		push_or_pop([10, 20, 2, 30]) => [10, 30]
26.	Define an encrypt_message function that accepts a string.
	The input string will consist of only alphabetic characters.
	The function should return a string where all characters have been moved "up" two spots in the alphabet. 
	For example, "a" will become "c".
	EXAMPLES
    --------
	encrypt_message("abc") => "cde"
	encrypt_message("xyz") => "zab"
	encrypt_message("")    => ""
27.	1.	Define a word_lengths function that accepts a string. 
		It should return a list with the lengths of each word.
		EXAMPLES
		--------
		word_lengths("Mary Poppins was a nanny")  => [4, 7, 3, 1, 5]
		word_lengths("Somebody stole my donut")   => [8, 5, 2, 5]
	2.	Define a cleanup function that accepts a list of strings.
		The function should return the strings joined together by a space.
		There's one BIG problem -- some of the strings are empty or only consist of spaces!
		These should NOT be included in the final string.
		EXAMPLES
		--------
		cleanup(["cat", "er", "pillar"])           => "cat er pillar"
		cleanup(["cat", " ", "er", "", "pillar"])  => "cat er pillar"
		cleanup(["", "", " "])                     => ""
28.	1.	Define a nested_sum function that accepts a list of lists of numbers.
		The function should return the sum of the values.
		The list may contain empty lists.
		EXAMPLES
		--------
		nested_sum([[1, 2, 3], [4, 5]])            => 15
		nested_sum([[1, 2, 3], [], [], [4], [5]])  => 15
		nested_sum([[]])                           => 0
	2.	Define a fancy_concatenate function that accepts a list of lists of strings.
		The function should return a concatenated string.
		The strings in a list should only be concatenated if the length of the list is 3.
		EXAMPLES
		--------
		fancy_concatenate([["A", "B", "C"]])                        => "ABC"
		fancy_concatenate([["A", "B", "C"], ["D", "E", "F"]])       => "ABCDEF"
		fancy_concatenate([["A", "B", "C"], ["D", "E", "F", "G"]])  => "ABC"
		fancy_concatenate([["A", "B", "C"], ["D", "E"]])            => "ABC"
		fancy_concatenate([["A", "B"], ["C", "D"]])                 => ""
29.	1.	Uncomment the commented lines of code below and complete the list comprehension logic.
		a.	The floats variable should store the floating point values for each string in the values list.
			--------
			values = ["3.14", "9.99", "567.324", "5.678"]
			# floats = []
		b.	The letters variable should store a list of 5 strings. 
			Each of the strings should be a character from name concatenated together 3 times.
			i.e. ['BBB', 'ooo', 'rrr', 'iii', 'sss']
			--------
			name = "Boris"
			# letters = []
		c.	The 'lengths' list should store a list with the lengths of each string in the 'elements' list.
			--------
			elements = ["Hydrogen", "Helium", "Lithium", "Boron", "Carbon"]
			# lengths = []
	2.	Declare a destroy_elements function that accepts two lists.
		It should return a list of all elements from the first list that are NOT contained in the second list.
		Use list comprehension in your solution.
		EXAMPLES
		--------
		destroy_elements([1, 2, 3], [1, 2])      => [3]
		destroy_elements([1, 2, 3], [1, 2, 3])   => []
		destroy_elements([1, 2, 3], [4, 5])      => [1, 2, 3]
30.	1.	Declare a right_words function that accepts a list of words and a number.
		Return a new list with the words that have a length equal to the number.
		Do not use list comprehension.
		EXAMPLES
		--------
		right_words(['cat', 'dog', 'bean', 'ace', 'heart'], 3)     => ['cat', 'dog', 'ace']
		right_words(['cat', 'dog', 'bean', 'ace', 'heart'], 5)     => ['heart']
		right_words([], 4)                                         => []  
	2.	Declare an only_odds function. It should accept a list of whole numbers.
		It should return a list with only the odd numbers from the original list.
		Do not use list comprehension.
		EXAMPLES
		--------
		only_odds([1, 3, 5, 6, 7, 8])      =>  [1, 3, 5, 7]
		only_odds([2, 4, 6, 8])            =>  []
	3.	Declare a count_of_a function that accepts a list of strings.
		It should return a list with counts of how many “a” characters appear per string.
		Do not use list comprehension.
		EXAMPLES
		--------
		count_of_a(["alligator", "aardvark", "albatross"])    => [2, 3, 2]
		count_of_a(["plywood"])                               => [0]
		count_of_a([])                                        => []
31.	1.	Declare a greater_sum function that accepts two lists of numbers. 
		It should return the list with the greatest sum.
		You can assume the lists will always have different sums.
		EXAMPLES
		--------
		greater_sum([1, 2, 3], [1, 2, 4]) => [1, 2, 4]
		greater_sum([4, 5], [2, 3, 6])    => [2, 3, 6]
		greater_sum([1], [])              => [1]
	2.	Declare a sum_difference function that accepts two lists of numbers.
		It should return the difference between the sum of values in the first list and the second list.
		EXAMPLES
		--------
		sum_difference([1, 2, 3], [1, 2, 4]) => 6 - 7 => -1
		sum_difference([4, 5], [2, 3, 6])    => 9 - 11 => -2
		sum_difference([1], [])              => 1
32.	a.	Declare a months tuple with the last 4 months of the year (September, October, November, December) as strings.
		Make sure the first letter of each month is capitalized.
	b.	Create a faves variable with a list of your 3 three favorite movies as strings. 
		Use the tuple function to convert the list to a tuple and save the result in a movies variable.
	c.	Create a numbers_a, numbers_b, and numbers_c tuple. 
		Each tuple should contain 3 integers. 
		Declare an all_numbers tuple containing these three tuples.
33.	a.	Given the tuple below, destructure the three values and assign them to position, city and salary variables
		Do not use index positions (i.e. job_opening[1])
		--------
		job_opening = ("Software Engineer", "New York City", 100000)
	b.	Given the tuple below, 
		- destructure the first value and assign it to a street variable.
		- destructure the last value and assign it to a zip_code variable.
		- destructure the middle two values into a list and assign it to a city_and_state variable.
		--------
		address = ("35 Elm Street", "San Francisco", "CA", "94107")
	c.	Declare a sum_of_evens_and_odds function that accepts a tuple of numbers.
		It should return a tuple with two numeric values:
		-- the sum of the even numbers
		-- the sum of the odd numbers.
		EXAMPLES
		--------
		sum_of_evens_and_odds((1, 2, 3, 4))   => (6, 4)
		sum_of_evens_and_odds((1, 3, 5))      => (0, 9)
		sum_of_evens_and_odds((2, 4, 6))      => (12, 0)
34.	a.	Create an empty dictionary and assign it to the variable empty.
	b.	Create a dictionary with three key-value pairs. 
		The keys should be strings and the values should be integer values. 
		Assign the dictionary to a my_dict variable.
	c.	A dictionary’s keys can be any immutable data structure. 
		Create a dictionary with two key-value pairs and assign it to a winning_lottery_numbers variable. 
		Both of the keys should be tuples. 
		One of the values should be True, the other value should be False.
35.	1.	Define a to_dictionary function that accepts a list of strings. 
		The function should return a dictionary where the keys are the strings and the values are their original index positions in the list.
		EXAMPLES
		--------
		detectives = ["Sherlock Holmes", "Hercule Poirot", "Nancy Drew"]
		to_dictionary(detectives) => {'Sherlock Holmes': 0, 'Hercule Poirot': 1, 'Nancy Drew': 2}
	2.	Define a length_counts function that accepts a list of strings. 
		The function should return a dictionary where the keys represent length and the values represent how many strings have that length.
		EXAMPLES
		--------
		sa_countries = ["Brazil", "Venezuela", "Argentina", "Ecuador", "Bolivia", "Peru"]
		length_counts(sa_countries) => # {6: 1, 9: 2, 7: 2, 4: 1}
		There is 1 string with 6 letters, 2 strings with 9 letters, 2 strings with 7 letters, and 1 string with 4 letters.
36.	Declare a delete_keys function that accepts two arguments: a dictionary and a list of strings. 
	For each string in the list, if the string exists as a dictionary key, delete the key-value pair from the dictionary. 
	If the string does not exist as a dictionary key, avoid an error. 
	The return value should be the modified dictionary object.
	EXAMPLES
	--------
	my_dict = {"A": 1, "B": 2, "C": 3}
	strings = ["A", "C"]
	delete_keys(my_dict, strings) => {'B': 2}
37.	1.	Declare an invert function that accepts a dictionary object. 
		The function should return a new dictionary where the keys and values from the original dictionary are inverted. 
		Each key should now be a value, and each value should be a key. 
		Assume both the keys and values of the dictionary are immutable.
		EXAMPLES
		--------
		my_dict = {"A": "B", "C": "D", "E": "F"}
		invert(my_dict) => {'B': 'A', 'D': 'C', 'F': 'E'}
	2.	Declare a count_of_value function that accepts a dictionary and an integer.
		It should return a count of the number of times the integer appears as a value among the dictionary’s values.
		EXAMPLES
		--------
		my_dict = { "a" : 5, "b" : 3, "c" : 5 }
		count_of_value(my_dict, 5) => 2
		count_of_value(my_dict, 3) => 1
	3.	Declare a sum_of_values function that accepts a dictionary and a list of strings.
		The dictionary will have keys of strings and values of numbers.
		The function should return the sum of values for dictionary keys that are also found in the list.
		NOTE: sum is a reserved keyword in Python. Don’t use it as a variable name.
		EXAMPLES
		--------
		my_dict = { "a": 5, "b": 3, "c": 10 }
		sum_of_values(my_dict, ["a"])            => 5
		sum_of_values(my_dict, ["a", "c"])       => 15
		sum_of_values(my_dict, ["a", "c", "b"])  => 18
		sum_of_values(my_dict, ["z"])            => 0
38.	Declare a common_elements function that accepts a dictionary.
	It should return a list with all of the elements that are found as both a key and a value in the dictionary.
	HINT: Use the in operation to check for inclusion in a view or list object
	EXAMPLES
	--------
	my_dict = {"A": "K", "B": "D", "C": "A", "D": "Z"}
	common_elements(my_dict) => ["A", "D"]
39.	Assign a list of four dictionaries to a "complexity" variable below:
	-	The first and third dictionaries should have two key-value pairs. 
		For those dictionaries, the keys should be strings and the values should be Booleans.
	-	The second and fourth dictionaries should have three key-value pairs.
		For those dictionaries, the keys shoulds be floats and the values should be list of strings. 
		The lists can be of any length.
40.	Declare a plenty_of_arguments function that accepts two parameters (a and b) and an additional **kwargs parameter.
	The function should return True if the sum of a, b, and the values of **kwargs is greater than 100. 
	It should return False otherwise.
	EXAMPLES
	--------
	plenty_of_arguments(20, 30)                          => False
	plenty_of_arguments(a = 50, b = 75)                  => True
	plenty_of_arguments(a = 50, b = 25, c = 50)          => True
	plenty_of_arguments(a = 25, b = 25, c = 25, d = 25)  => False
	plenty_of_arguments(a = 25, b = 25, c = 25, d = 26)  => True
41.	1.	You are writing a Python program to model a remote control for a television set. 
		Declare a stations_to_numbers function that accepts a dictionary. 
		The keys will be channel numbers and the values will be the station names.
		The stations_to_numbers function should return an inverted dictionary where the keys are the station names and the values are the channel numbers.
		EXAMPLES
		--------
		channels = {2: "CBS", 4: "NBC", 5: "FOX", 7: "ABC"}
		stations_to_numbers(channels) => {'CBS': 2, 'NBC': 4, 'FOX': 5, 'ABC': 7}
	2.	Declare a coaster_conversion function that accepts a dictionary.
		The keys of the dictionary will be strings representing roller coasters.
		The values will be the heights of each coaster in meters.
		Return a new dictionary with the same keys.
		The values should be the heights converted from meters to feet.
		The final values (in feet) should also be rounded to the closest integer.
		HINT: 1 meter is equal to 3.28084 feet.
		HINT: The round function rounds a number to the nearest integer.
		EXAMPLES
		--------
		coasters = {"Kingda Ka": 139, "Top Thrill Dragster": 130, "Superman: Escape From Krypton": 126}
		coaster_conversion(coasters) => {'Kingda Ka': 456, 'Top Thrill Dragster': 426, 'Superman: Escape From Krypton': 413}
42.	1.	Declare a set with 3 of your favorite movies as strings.
		Assign it to a movies variable.
	2.	Declare a set with the first four months of the year as strings.
		Assign it to a months variable.
		Make sure the first letter of each month is capitalized.
	3.	Create an empty set and assign it to an empty variable.
	4.	Define a remove_duplicates function that accepts a single list as an argument. 
		The function should return a list with all of the duplicates from the original list removed.
		The order of elements in the returned list is irrelevant.
		EXAMPLES
		--------
		remove_duplicates([1, 2, 1, 2])  => [1, 2] or [2, 1]
		remove_duplicates([1, 2, 3, 4])  => [1, 2, 3, 4] in some order
43.	Define an invoke_thrice function.
	It should accept a single argument (which will be a function).
	In its body, the invoke_thrice function should invoke.
	The function that's passed in exactly three times.
44.	Define an "outer" function that accepts no arguments.
	Inside the body of "outer", define an "inner" function.
	The "inner" function should return the value 5.
	From "outer", return the uninvoked "inner" function.
45.	Define a global "a" variable assigned to the value 1.
	Declare a "modify_a" function that accepts a single argument.
	It should overwrite the value of the a global variable with the argument.
46.	a.	Declare a Country class with an empty body.
		Instantiate an object from the class and assign it to an “america" variable.
		Instantiate another object from the class and assign it to a “canada” variable.
		Instantiate a third object from the class and assign it to a “mexico” variable.
	b.	Declare a Superhero class with an empty body.
		Instantiate an object from the class and assign it to an “spiderman" variable.
		Instantiate another object from the class and assign it to a “batman” variable.
		Instantiate a third object from the class and assign it to a “superman” variable.
47.	a.	Declare a Musical class that accepts a name parameter. 
		In the initialization process for an object, assign the name parameter to a name attribute on the object.
		Instantiate a Musical object with the name “Rent” and assign it to an “rent" variable.
		Instantiate a second Musical object with the name “Book of Mormon" and assign it to a “mormon” variable.
		Instantiate a third object from the class with the name “Chicago" and assign it to a “chicago” variable.
	b.	Declare a Shape class that accepts a sides parameter. 
		In the initialization process for an object, assign the sides parameter to a sides attribute on the object.
		Instantiate a Shape object with 3 sides and assign it to a “triangle" variable.
		Instantiate a Shape object with 4 sides and assign it to a “square" variable.
		Instantiate a Shape object with 10 sides and assign it to a “decagon" variable.
	c.	Declare a Skyscraper class that accepts name and year parameters. 
		In the initialization process for an object, assign the name parameter to a name attribute 
		and the year parameter to a year attribute.
		Instantiate a Skyscraper object with the name “Empire State Building”  and the year 1931. 
		Assign it to a “empire" variable.
		Instantiate a Skyscraper object with the name “One World Trade Center” and the year 2014. 
		Assign it to a “wtc" variable.
48.	Declare a Zombie class that accepts health and brains_eaten parameters. 
	In the initialization process for a Zombie object, assign the two parameters to two attributes with the same name.
	If the instantiation does not pass a health parameter, it should be assigned a default value of 100.
	If the instantiation does not pass a brains_eaten parameter, it should be assigned a default value of 5.
	Instantiate a Zombie object with 80 health and 5 brains eaten. 
	Assign it to a “bob” variable.
	Instantiate a Zombie object with 120 health and 3 brains eaten.
	Assign it to a “sally” variable.
	Instantiate a Zombie object with no custom parameters.
	Assign it to a “benjamin” variable.
	Practice instantiating the objects with both positional and keyword arguments.
49.	Declare a Musician class that accepts age and income parameters. 
	In the instantiation process for an object, assign the two parameters to two attributes with the same name.
	Declare an enter_club instance method. 
	If the musician is less than 21 years old, the method should return the string "Access denied!”. 
	If the musician is 21 or older, the method should return the string "Access granted!".
	Declare a play_show instance method. 
	The method should increment the musician’s income by 5.
	EXAMPLES
	--------
	cliff = Musician(age = 27, income = 0)
	print(cliff.age)    # 27
	print(cliff.enter_club())  # "Access granted!"
	print(cliff.income) # 0
	cliff.play_show()
	print(cliff.income) # 5
	cliff.play_show()
	print(cliff.income) # 10
50.	book.py
	Let’s say we want to model a Book as a Python object. 
	A Book has an author and a publisher, which are characteristics that cannot change. 
	A Book also has a page_count, which could be altered if you rip some pages from the book.
	Declare a Book class that accepts author, publisher, and page_count parameters. 
	Each of the parameters should be assigned to an attribute. 
	The author and publisher attributes should be designated as protected (use an underscore). 
	The page_count attribute should be designated public.
	Define a copyright instance method that returns a string with information about the copyright. 
	It should look the string below, where “Grant Cardone” is the value of the protected
	author attribute and “10X Enterprises” is the value of the protected publisher attribute.
	=> Copyright Grant Cardone, 10X Enterprises
	The public page_count attribute can always be manually modified. 
	However, we can still define an instance method that modifies it. 
	Declare a rip_in_half instance method. 
	If the book has more than 1 page, it should halve the page_count. 
	If the book has 1 page or less, it should set the page_count to 0.
	EXAMPLES
	--------
	book = Book(author = "Grant Cardone", publisher = "10X Enterprises", page_count = 10)
	print(book.copyright()) # Copyright Grant Cardone, 10X Enterprises
	print(book.page_count) # 10
	book.rip_in_half()
	print(book.page_count) # 5.0
	book.rip_in_half()
	print(book.page_count) # 2.5
	book.rip_in_half()
	print(book.page_count) # 1.25
	book.rip_in_half()
	print(book.page_count) # 0.625
	book.rip_in_half()
	print(book.page_count) # 0
	book.rip_in_half()
	print(book.page_count) # 0
51.	Declare a PizzaPie class that accepts a total_slices parameter.
	In the instantiation process for an object, assign the parameter to an attribute with the same name.
	A PizzaPie object should also be initialized with a _slices_eaten protected attribute set to 0.
	Define a slices_eaten property.
	The getter method should retrieve the value of the _slices_eaten attribute.
	The setter method should set a new value for the _slices_eaten attribute 
	but only if the argument is less than total_slices.
	Define a percentage property that calculates how much of the pie has been eaten
	(the number of slices eaten divided by the total slices available).
	The percentage property should be read-only.
	EXAMPLES
	--------
	cheese = PizzaPie(8)
	cheese.slices_eaten = 2
	print(cheese.percentage) # 0.25
	cheese.slices_eaten = 4
	print(cheese.percentage) # 0.5
	cheese.slices_eaten = 10 # _slices_eaten should not change because there's only 8 slices in pie
	print(cheese.percentage) # 0.5
	ERROR - AttributeError: can't set attribute
	cheese.percentage = 0.50
52.	Define a Chocolate class that accepts and assigns a cacao_content attribute.
	Define a "sweet" class method that returns a Chocolate object with a cacao_content value of 30.
	Define a "semisweet" class method that returns a Chocolate object with a cacao_content value of 50.
	Define a "bittersweet" class method that returns a Chocolate object with a cacao_content value of 70.
	Define a "bitter" class method that returns a Chocolate object with a cacao_content value of 99.
53.	Part A: Instantiation
		Define a BusTrip class that is initialized with a destination, a bus company, and a price for the trip.
		Preserve the arguments as attributes on the object.
		The choice of whether to use protected attributes is up to you.
	Part B: String Representation
		The string representation of a BusTrip object must be a string in the form of:
		"You paid 24.99 to Greyhound to go to Boston.""
		In this example, “Boston” is the destination, “Greyhound” is the bus company, and 24.99 is the price.
		These are all fed in as arguments when a BusTrip object is initialized.
	Part C: Equality
		Implement equality logic between two different BusTrip objects.
		Two BusTrips object are considered equal if:
			-- they have the same destination
			-- their price is within 3 dollars of each other
	HINT: Use Python’s abs function to calculate the absolute value of a number.
	EXAMPLES
	--------
	boston1 = BusTrip(destination = "Boston", company = "Greyhound", price = 24.99)
	boston2 = BusTrip(destination = "Boston", company = "Megabus", price = 22.99)
	boston3 = BusTrip(destination = "Boston", company = "Megabus", price = 49.99)
	philly  = BusTrip(destination = "Philadelphia", company = "Peter Pan", price = 12.99)
	print(boston1)            # You paid 24.99 to Greyhound to go to Boston.
	print(boston1 == philly)  # False - different destinations
	print(boston1 == boston2) # True - same destination and insignificant price difference
	print(boston1 == boston3) # False - large price difference
54.	Define a CollegeStudent class that accepts and assigns a university attribute.
	Add a docstring for the class equal to "Blueprint for a student at an institution of higher learning"
	Define three instance methods — sleep, eat, and party.
	The actual content of the methods is irrelevant (feel free to use the pass keyword)
	The sleep method should have the docstring "Sleep through class".
	The eat method should have the docstring "Go to the cafeteria".
	The party method should have the docstring "Hit the books hard".
	To simplify the test evaluation, submit ALL docstrings without any line breaks.
	EXAMPLES
	--------
	Example: """Sample docstring"""
	You're welcome to use single quotes, double quotes, or triple quotes.
	print(CollegeStudent.__doc__) # Blueprint for a student at an institution of higher learning
	marty = CollegeStudent("Python Community College")
	print(marty.sleep.__doc__) # Sleep through class
	print(marty.eat.__doc__)   # Go to the cafeteria
	print(marty.party.__doc__) # Hit the books hard
55.	Use the namedtuple function to create a GymExercise class whose instances will have three attributes: 
	name, weight, and reps.
	Assign a squat variable to a GymExercise tuple object with 
	a name of “squat”, a weight of 265, and a rep count of 3.
	Assign a bench variable to a GymExercise tuple object with 
	a name of “benchpress”, a weight of 185, and a rep count of 5.
	Assign a deadlift variable to a GymExercise tuple object with 
	a name of “deadlift”, a weight of 225, and a rep count of 6.
	Assign a press variable to a GymExercise tuple object with 
	a name of “press”, a weight of 120, and a rep count of 8.
56.	Define a Car class that accepts a maker (string), model (string), and year (number) parameters 
	and assigns them to respective attributes.
	Define a Dealership class. 
	Each Dealership object should instantiate with a "cars" attribute set to an empty list.
	A Dealership object should have a accept_delivery instance method that accepts a Car object 
	and adds it to the Dealership's internal "cars" list.
	Indexing into a Dealership with a number should access a specific Car object in the Dealership.
	An index position in a Dealership should also be overwriteable with a new Car object (see examples below)
	EXAMPLES
	--------
	f150 = Car(maker = "Ford", model = "F-150", year = 2019)
	camry = Car(maker = "Toyota", model = "Camry", year = 2020)
	porsche = Car (maker = "Porsche", model = "911 Carrera", year = 2021)
	dealership = Dealership()
	dealership.accept_delivery(f150)
	dealership.accept_delivery(camry)
	print(dealership[0].year) # 2019 -- the F150's year
	dealership[0] = porsche
	for car in dealership:
		print(car.maker) # Porsche, Toyota
57.	Declare a Newspaper class.
	Each Newspaper will have a 'pages' attribute set to an integer and a 'sections' attribute set to a dictionary.
	The keys in 'sections' will be strings representing a section (i.e. "Politics")
	and the values will be the starting page for that section (i.e. "A5").
	The length of a newspaper should be equal to the number of pages it holds.
	Indexing the newspaper by a section should return the starting pasge for that section.
	Make it so two newspapers are considered equal if they have the same number of pages AND the same number of sections.
	EXAMPLES
	--------
	monday_sections = {
		"Politics": "A5",
		"Sports": "B2",
		"Entertainment": "C3"
	}
	tuesday_sections = {
		"Travel": "A5",
		"Cooking": "B2",
	}
	wednesday_sections = {
		"Classifieds": "A5",
		"Weddings": "B2",
		"Weather": "C3"
	}
	np1 = Newspaper(pages = 80, sections = monday_sections)
	np2 = Newspaper(pages = 60, sections = tuesday_sections)
	np3 = Newspaper(pages = 80, sections = wednesday_sections)
	print(len(np1))        # 80
	print(len(np2))        # 60
	print(np1 == np2)      # False -- np1 has 3 sections while np2 has 2 sections
	print(np1 == np3)      # True -- both have 80 pages and 3 sections
	print(np1["Politics"]) # "A5"
	print(np2["Cooking"])  # "B2"
58.	Declare a HardwareStore subclass that inherits from the Store superclass.
	Do not define any attributes and methods on the subclass.
	Use the pass keyword to avoid a class body in HardwareStore.
	Instantiate a new instance of the HardwareStore class and assign it to a home_depot variable.
	Access the value of the "owner" attribute on your HardwareStore instance.
	Invoke the exclaim instance method on your HardwareStore instance.
	EXAMPLES
	--------
	class Store():
		def __init__(self):
			self.owner = "Boris"
		def exclaim(self):
			return "I'm defined in the superclass!"
59.	Define a Clothing superclass with wear and sell instance methods.
	The wear method should return the string “I'm wearing this fashionable piece of clothing!”
	The sell method should return the string “Buy my piece of clothing!”
	Define a Socks subclass that inherits from the Clothing superclass.
	It should define a lose_one instance method that returns the string “Where did my other one go?”
	It should override the wear method to return the string “Take a look at my socks! They're gorgeous!”
	It should override the sell method to return the string “Buy my socks!”
60.	Declare a Musician class that accepts a name argument in its initialization.
	The initialization should assign a name argument to a name attribute.
	In addition, each Musician object should have an "albums" attribute that begins as an empty list.
	Define a release_album instance method on a Musician that accepts a title (string).
	It should append the string to the end of the list held by the albums attribute (see examples below).
	Declare a Drummer subclass than inherits from the Musician superclass.
	In addition to a name, a drummer should also have a stamina attribute represented by an integer.
	The subclass should invoke the Musician superclass’s initialization procedure and pass it the drummer’s name.
	It should also set the stamina attribute in its own initialization process.
	EXAMPLES
	--------
	lars = Drummer(name = "Lars", stamina = 2)
	print(lars.name)   # "Lars"
	print(lars.stamina) # 2
	print(lars.albums) # []
	lars.release_album("Ride the Lightning")
	print(lars.albums) # ["Ride the Lightning"]
	lars.release_album("Master of Puppets")
	print(lars.albums)  # ["Ride the Lightning", 'Master of Puppets']
61.	In this exercise, we'll be modelling a routine for proper dental health, 
	which includes brushing our teeth, flossing, and using mouthwash.
	The order of these three varies from person to person.
	Declare a DentalHealthItem class. 
	Its initialization should set a "price" attribute.
	Declare a Toothbrush subclass that inherits from DentalHealthItem.
	On it, define a "use" instance method that returns "Brushing the teeth"
	Declare a Floss subclass that inherits from DentalHealthItem.
	On it, define a "use" instance method that returns "Flossing the teeth"
	Declare a Mouthwash subclass that inherits from DentalHealthItem.
	On it, define a "use" instance method that returns "Washing the teeth"
	Instantiate an instance of a Toothbrush and assign it a "toothbrush" variable.
	Instantiate an instance of a Floss and assign it a "floss" variable.
	Instantiate an instance of a Mouthwash and assign it a "mouthwash" variable.
	Declare a "dental_health_kit" variable. 
	It should be a list that stores the three objects.
	Import the "random" module (see last lesson for reference).
	Invoke the "shuffle" function from the module, passing in the dental_health_kit list.
	This will mutate the list, randomizing the order of its elements.
	Use list comprehension to invoke the "use" method on all three objects in "dental_health_kit".
	Assign the resulting list of strings to an "actions" variable.
62.	


	EXAMPLES
	--------
